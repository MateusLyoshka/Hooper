generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
    playerId        String    @id @default(uuid())
    name            String    
    email           String    @unique
    password        String    
    isGuesser       Boolean   
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt()
}

model Game {
    gameId     String     @id @db.Uuid @default(uuid())
    gameName   String      @db.VarChar(255)
    startTime  DateTime
    endTime    DateTime?
    teamA      String      @db.VarChar(255)
    teamB      String      @db.VarChar(255)
    teamAplayers String[]
    teamBplayers String[]
    type       String      @db.VarChar(255)
    mode       String      @db.VarChar(255)
    court      String      @db.VarChar(255)
    matchDuration Int
    matchOver  Boolean    @default(false)
    gameDate   String     @db.VarChar(255)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @default(now())

    // Relação muitos-para-muitos com player via tabela intermediária
    players    PlayerGame[]

    @@map("games")  
}

// Tabela intermediária para a relação muitos-para-muitos entre player e game
model PlayerGame {
    playerId   String   @db.Uuid
    gameId     String   @db.Uuid

    game       Game     @relation(fields: [gameId], references: [gameId], onDelete: Cascade)

    @@id([playerId, gameId]) // Definir chave composta para garantir unicidade
    @@map("players_games")   // Nome da tabela no banco de dados
}

model Stats {
    statId        String   @id @db.Uuid @default(uuid()) 
    gamesplayed   Int
    gameswon      Int
    points        Int
    assists       Int
    rebounds      Int
    blocks        Int
    position      String   @db.VarChar(255)
    height        String   @db.VarChar(255) @default("0")
    dominantHand  String   @db.VarChar(255)

    // Relação um-para-um com player (não precisa definir fields e references aqui)

    @@map("stats")
}
